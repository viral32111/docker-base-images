name: Docker

on:
  push:
    paths:
    - 'Context/**'
    - '**/Dockerfile'
    - '.dockerignore'
    - '.github/workflows/docker.yml'
    branches:
    - '**'
    tags:
    - '*.*.*'
  pull_request:
    branches:
    - '**'
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

env:
  REGISTRY_NAME: ghcr.io
  PUBLISHER_WEBSITE: https://viral32111.com

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04
    env:
      REGISTRY_IMAGE_NAME: ubuntu
      HUMAN_IMAGE_NAME: Ubuntu
    strategy:
      matrix:
        release: [ '20.04', '22.04', '22.10' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Fetch latest version
        id: release
        run: |
          RELEASE_NAME=$(curl -s https://api.launchpad.net/1.0/ubuntu/series | jq -r '.entries[] | select( .version == "${{ matrix.release }}" ) | .name')
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_OUTPUT

          RELEASE_VERSION=$(curl -s https://api.launchpad.net/1.0/ubuntu/${RELEASE_NAME}/all_milestones | jq -r '.entries[ 1 ].name' | sed --regexp-extended 's/^ubuntu-//g')
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Download & minify release archive
        run: |
          RELEASE_DOWNLOAD_URL="https://cdimage.ubuntu.com/ubuntu-base/releases/${{ matrix.release }}/release/ubuntu-base-${{ steps.release.outputs.RELEASE_VERSION }}-base-amd64.tar.gz"
          RELEASE_DOWNLOAD_DIR="/tmp/${{ env.REGISTRY_IMAGE_NAME }}-${{ matrix.release }}-base"
          RELEASE_DOWNLOAD_FILE="${RELEASE_DOWNLOAD_DIR}.tar.gz"

          wget --output-document ${RELEASE_DOWNLOAD_FILE} ${RELEASE_DOWNLOAD_URL}
          tar --verbose --extract --no-same-owner --file ${RELEASE_DOWNLOAD_FILE} --directory ${RELEASE_DOWNLOAD_DIR}

          rm --verbose --recursive ${RELEASE_DOWNLOAD_DIR}/var/log/*
          tar --verbose --create --gzip --file ./Context/base.tar.gz --directory ${RELEASE_DOWNLOAD_DIR} .

          rm --verbose --recursive ${RELEASE_DOWNLOAD_DIR}

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.release }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.release.outputs.RELEASE_VERSION }}
            org.opencontainers.image.description=My personal image for ${{ env.HUMAN_IMAGE_NAME }} ${{ steps.release.outputs.RELEASE_VERSION }}.
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ matrix.release }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./Distributions/Ubuntu/Dockerfile
          context: ./Context/${{ env.HUMAN_IMAGE_NAME }}/${{ matrix.release }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            UBUNTU_RELEASE_VERSION=${{ steps.release.outputs.RELEASE_VERSION }}
            UBUNTU_RELEASE_NAME=${{ steps.release.outputs.RELEASE_NAME }}

  alpine:
    name: Alpine
    runs-on: ubuntu-22.04
    env:
      REGISTRY_IMAGE_NAME: alpine
      HUMAN_IMAGE_NAME: Alpine
    strategy:
      matrix:
        version: [ '3.15', '3.16' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Create Metadata for Docker Image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=My personal image for ${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}.
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ matrix.version }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./Distributions/${{ env.HUMAN_IMAGE_NAME }}/${{ matrix.version }}/Dockerfile
          context: ./Context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true

  java:
    name: Java
    runs-on: ubuntu-22.04
    needs: ubuntu
    env:
      REGISTRY_IMAGE_NAME: java
      HUMAN_IMAGE_NAME: Java
    strategy:
      matrix:
        version: [ '8', '11', '16', '17', '18', '19' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Create Metadata for Docker Image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=My personal image for ${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}.
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ matrix.version }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Fetch latest version
        id: version
        run: |
          VERSION_URL="https://api.github.com/repos/adoptium/temurin${{ matrix.version }}-binaries/releases/latest"
          VERSION_LATEST=$(curl --silent --header 'Accept: application/vnd.github+json' ${VERSION_URL} | jq -r .name | sed --regexp-extended 's/^jdk-?//g')
          echo "VERSION_LATEST=${VERSION_LATEST}" >> $GITHUB_OUTPUT

          VERSION_SCHEME=$(case ${{ matrix.version }} in 8) echo Legacy ;; 16) echo JDK ;; *) echo Modern ;; esac)
          echo "VERSION_SCHEME=${VERSION_SCHEME}" >> $GITHUB_OUTPUT

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./${{ env.HUMAN_IMAGE_NAME }}/${{ steps.version.outputs.VERSION_SCHEME }}/Dockerfile
          context: ./Context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            JAVA_VERSION_MAJOR=${{ matrix.version }}
            JAVA_VERSION_LATEST=${{ steps.version.outputs.VERSION_LATEST }}
