name: Ubuntu

# This action builds the Ubuntu Docker image, and all images based on it.

on:
  push:
    paths:
      - 'Context/**'
      - 'Images/Ubuntu/**'
      - '.dockerignore'
      - '.github/workflows/ubuntu.yml'
    branches:
      - '**'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 1 * * 0'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  REGISTRY_NAME: ghcr.io
  PUBLISHER_WEBSITE: https://viral32111.com

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04
    env:
      REGISTRY_IMAGE_NAME: ubuntu
      HUMAN_IMAGE_NAME: Ubuntu
    strategy:
      matrix:
        version: [ '20.04', '22.04', '22.10' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Fetch latest version
        id: version
        run: |
          VERSION_NAME=$(curl -s https://api.launchpad.net/1.0/ubuntu/series | jq -r '.entries[] | select( .version == "${{ matrix.version }}" ) | .name')
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT

          DATE_TODAY=$(date +'%Y-%m-%d')
          LATEST_VERSION=$(curl -s https://api.launchpad.net/1.0/ubuntu/${VERSION_NAME}/all_milestones | jq --arg today ${DATE_TODAY} -r '[ .entries[] | select( ( .name | endswith( "-updates" ) | not ) and .date_targeted <= $today ) ][ 0 ].name' | sed --regexp-extended 's/^ubuntu-//g')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Download latest version archive
        run: |
          wget --output-document ./Context/base.tar.gz https://cdimage.ubuntu.com/ubuntu-base/releases/${{ matrix.version }}/release/ubuntu-base-${{ steps.version.outputs.LATEST_VERSION }}-base-amd64.tar.gz

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./Images/Ubuntu/Dockerfile
          context: ./Context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            UBUNTU_VERSION_NAME=${{ steps.version.outputs.VERSION_NAME }}
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

  nodejs:
    name: Node.js
    runs-on: ubuntu-22.04
    needs: ubuntu
    env:
      REGISTRY_IMAGE_NAME: nodejs
      HUMAN_IMAGE_NAME: Node.js
    strategy:
      matrix:
        version: [ '18', '19' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r --arg VERSION ${{ matrix.version }} '[ .[] | select( .version | startswith( "v" + $VERSION ) ) ][ 0 ].version' | cut -b 2-)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Create empty context directory
        run: |
          mkdir --verbose ./EmptyContext

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./Images/Ubuntu/Node.js/Dockerfile
          context: ./EmptyContext
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            NODEJS_VERSION=${{ steps.version.outputs.LATEST_VERSION }}
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6
