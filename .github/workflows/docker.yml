name: Docker

on:
  push:
    paths:
      - 'context/**'
      - 'images/**'
      - '.dockerignore'
      - '.github/workflows/*.yml'
    branches:
      - '**'
    tags:
      - '*.*.*'
  schedule:
    - cron: '0 1 * * 0' # Every Sunday at 01:00
  workflow_dispatch:

# Wait for any on-going workflow runs
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# Variables available in all jobs
env:
  DOCKER_REGISTRY_DOMAIN: ghcr.io
  DOCKER_LABEL_PUBLISHER_URL: https://viral32111.com

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest
    env:
      REGISTRY_IMAGE_NAME: ubuntu
      HUMAN_IMAGE_NAME: Ubuntu
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        release: [ '18.04', '20.04', '22.04', '24.04', '25.04' ]
        architecture: [ 'amd64', 'arm64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        uses: actions/github-script@v7
        env:
          RELEASE: ${{ matrix.release }}
          ARCHITECTURE: ${{ matrix.architecture }}
        with:
          script: |
            const { RELEASE, ARCHITECTURE } = process.env;
            console.log( `Release is '${ RELEASE }' for architecture '${ ARCHITECTURE }'.` );

            const seriesResponse = await fetch( 'https://api.launchpad.net/1.0/ubuntu/series' );
            const seriesData = await seriesResponse.json();
            if ( !seriesData ) throw new Error( 'No series data available!' );
            console.log( `Fetched series data for release '${ RELEASE }'.` );

            const releaseData = seriesData.entries.filter( entry => entry.version == RELEASE )[ 0 ];
            if ( !releaseData ) throw new Error( `No data available for release ${ RELEASE }!` );
            console.log( `Filtered release data.` );

            const releaseName = releaseData.name;
            if ( !releaseName ) throw new Error( `No name for release ${ RELEASE }!` );
            console.log( `Release name is '${ releaseName }'.` );

            const milestonesResponse = await fetch( `https://api.launchpad.net/1.0/ubuntu/${ releaseName }/all_milestones` );
            const milestonesData = await milestonesResponse.json();
            if ( !milestonesData ) throw new Error( `No milestones available for release ${ RELEASE } (${ releaseName })!` );
            console.log( `Fetched milestone data for release '${ RELEASE }' (${ releaseName }).` );

            let milestoneCode = null;
            for ( const milestoneData of milestonesData.entries ) {
              const milestoneName = milestoneData.name.replace( 'ubuntu-', '' );

              if ( !milestoneName.startsWith( RELEASE ) ) {
                console.warn( `Skipping milestone '${ milestoneName }' it is not for release '${ RELEASE }'...` );
                continue;
              }

              if ( milestoneName.endsWith( '-updates' ) ) {
                console.warn( `Skipping milestone '${ milestoneName }'...` );
                continue;
              }

              console.log( `Checking supported download link for milestone '${ milestoneName }'...` );
              const downloadResponse = await fetch( `https://cdimage.ubuntu.com/ubuntu-base/releases/${ RELEASE }/release/ubuntu-base-${ milestoneName }-base-${ ARCHITECTURE }.tar.gz`, {
                method: 'HEAD'
              } );

              if ( downloadResponse.ok ) {
                console.log( ` Valid download link for milestone '${ milestoneName }'.` );
                milestoneCode = milestoneName;
                break;
              } else {
                console.warn( ` Invalid download link for milestone '${ milestoneName }' (${ downloadResponse.status } ${ downloadResponse.statusText }).` );
              }
            }
            if ( !milestoneCode ) throw new Error( `Could not determine version code for release ${ RELEASE } (${ releaseName })!` );
            console.log( `Milestone code is '${ milestoneCode }'.` );

            const checksumsResponse = await fetch( `https://cdimage.ubuntu.com/ubuntu-base/releases/${ RELEASE }/release/SHA256SUMS` );
            const checksumsText = await checksumsResponse.text();
            if ( !checksumsText ) throw new Error( 'No download checksums available!' );
            console.log( 'Fetched SHA-256 checksums for downloads.' );

            const checksumLine = checksumsText.split( '\n' ).filter( line => line.endsWith( `*ubuntu-base-${ milestoneCode }-base-${ ARCHITECTURE }.tar.gz` ) )[ 0 ];
            const checksum = checksumLine.split( ' ', 2 )[ 0 ];
            console.log( `SHA-256 checksum for download is '${ checksum }'.` );

            core.setOutput( 'name', releaseName );
            core.setOutput( 'code', milestoneCode );
            core.setOutput( 'checksum', checksum );

      - name: Download latest version
        working-directory: context
        run: |
          wget --progress dot:mega --output-document ubuntu.tar.gz https://cdimage.ubuntu.com/ubuntu-base/releases/${{ matrix.release }}/release/ubuntu-base-${{ steps.version.outputs.code }}-base-${{ matrix.architecture }}.tar.gz
          echo "${{ steps.version.outputs.checksum }} ubuntu.tar.gz" | sha256sum --check

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=-${{ matrix.architecture }},onlatest=false
          tags: type=raw,value=${{ matrix.release }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.release }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.code }} (${{ steps.version.outputs.name }}) for ${{ matrix.architecture }}
            org.opencontainers.image.version=${{ steps.version.outputs.code }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/ubuntu/dockerfile
          context: context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            RELEASE=${{ steps.version.outputs.name }}
            VERSION=${{ steps.version.outputs.code }}
            ARCHITECTURE=${{ matrix.architecture }}

  alpine:
    name: Alpine Linux
    runs-on: ubuntu-latest
    env:
      REGISTRY_IMAGE_NAME: alpine
      HUMAN_IMAGE_NAME: Alpine Linux
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        release: [ '3.16', '3.17', '3.18', '3.19', '3.20', '3.21', '3.22' ]
        architecture: [ 'amd64', 'arm64' ]
        include:
          - architecture: amd64
            alternativeArchitecture: x86_64
          - architecture: arm64
            alternativeArchitecture: aarch64
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        uses: actions/github-script@v7
        env:
          RELEASE: ${{ matrix.release }}
          ARCHITECTURE: ${{ matrix.alternativeArchitecture }}
        with:
          script: |
            const { RELEASE, ARCHITECTURE } = process.env;
            console.log( `Release is '${ RELEASE }' for architecture '${ ARCHITECTURE }'.` );

            const latestReleasesResponse = await fetch( `https://dl-cdn.alpinelinux.org/alpine/v${ RELEASE }/releases/${ ARCHITECTURE }/latest-releases.yaml` );
            const latestReleasesYAML = await latestReleasesResponse.text();
            if ( !latestReleasesYAML ) throw new Error( 'No latest releases available!' );
            console.log( `Fetched latest releases for release '${ RELEASE }'.` );

            const latestReleases = [];
            let currentRelease = new Map();
            for ( let line of latestReleasesYAML.split( '\n' ) ) {
              line = line.trim();
              if ( line === '' ) {
                console.warn( `Skipping empty line...` );
                continue;
              }

              if ( line.match( /^\s*-\s*/ ) !== null ) {
                if ( currentRelease.size > 0 ) {
                  latestReleases.push( currentRelease );
                  console.log( `Parsed latest release with '${ currentRelease.size }' properties.'` )
                  currentRelease = new Map();
                } else {
                  console.warn( `Ignoring empty release...` );
                }

              } else {
                const lineMatch = line.match( /^\s*([\w\d_]+)\:\s*(.+)$/ );
                if ( lineMatch !== null ) {
                  const [ _, key, value ] = lineMatch;
                  currentRelease.set( key, value );
                } else {
                  console.warn( `Ignoring YAML line '${ line }'!` );
                }
              }
            }

            if ( latestReleases.length <= 0 ) throw new Error( 'No latest releases parsed!' );
            console.log( `Parsed '${ latestReleases.length }' latest releases.` );

            const latestRelease = latestReleases.find( release => release.get( 'flavor' ) == 'alpine-minirootfs' );
            if ( !latestRelease ) throw new Error( 'No latest release found!' );
            console.log( `Latest release is '${ latestRelease.get( 'version' ) }' with SHA-256 checksum '${ latestRelease.get( 'sha256' ) }'.` );

            core.setOutput( 'code', latestRelease.get( 'version' ) );
            core.setOutput( 'checksum', latestRelease.get( 'sha256' ) );

      - name: Download latest version
        working-directory: context
        run: |
          wget --progress dot:mega --output-document alpine.tar.gz https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.release }}/releases/${{ matrix.alternativeArchitecture }}/alpine-minirootfs-${{ steps.version.outputs.code }}-${{ matrix.alternativeArchitecture }}.tar.gz
          echo "${{ steps.version.outputs.checksum }} alpine.tar.gz" | sha256sum --check

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=-${{ matrix.architecture }},onlatest=false
          tags: type=raw,value=${{ matrix.release }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.release }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.code }} for ${{ matrix.architecture }}
            org.opencontainers.image.version=${{ steps.version.outputs.code }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/alpine/dockerfile
          context: context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            VERSION=${{ steps.version.outputs.code }}
            ARCHITECTURE=${{ matrix.architecture }}

  java:
    name: Java
    runs-on: ubuntu-latest
    needs:
      - ubuntu
      - alpine
    env:
      REGISTRY_IMAGE_NAME: java
      HUMAN_IMAGE_NAME: Java
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: [ '8', '11', '16', '17', '18', '19', '20', '21', '22', '23', '24' ]
        distro: [ 'ubuntu', 'alpine' ]
        architecture: [ 'amd64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        uses: actions/github-script@v7
        env:
          MATRIX_VERSION: ${{ matrix.version }}
          MATRIX_DISTRO: ${{ matrix.distro }}
        with:
          result-encoding: string
          script: |
            const repositoryOwner = 'adoptium';
            const repositoryName = 'temurin' + process.env.MATRIX_VERSION + '-binaries';
            const releaseType = process.env.MATRIX_VERSION === '16' ? 'jdk' : 'jre';

            for await ( const response of github.paginate.iterator( github.rest.repos.listReleases, {
                owner: repositoryOwner,
                repo: repositoryName
            } ) ) {
              for ( const release of response.data ) {
                if ( release.draft === true || release.prerelease === true ) continue;

                for ( const releaseAsset of release.assets ) {
                  if ( process.env.MATRIX_DISTRO == 'alpine' && releaseAsset.name.includes( releaseType + '_x64_alpine-linux' ) ) {
                    return release.name.replace( /^jdk-?/, '' );
                  } else if ( process.env.MATRIX_DISTRO == 'ubuntu' && releaseAsset.name.includes( releaseType + '_x64_linux' ) ) {
                    return release.name.replace( /^jdk-?/, '' );
                  }
                }
              }
            }

            core.setFailed( 'Failed to fetch the latest version' );

      - name: Clear context directory
        run: rm --verbose --recursive context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.result }} (${{ matrix.distro }}-based)
            org.opencontainers.image.version=${{ steps.version.outputs.result }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/${{ matrix.distro }}/java/dockerfile
          context: context/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            JAVA_VERSION=${{ steps.version.outputs.result }}

  dotnet:
    name: .NET Runtime
    runs-on: ubuntu-latest
    needs:
      - ubuntu
      - alpine
    env:
      REGISTRY_IMAGE_NAME: dotnet
      HUMAN_IMAGE_NAME: .NET Runtime
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: [ '6', '7', '8', '9' ]
        distro: [ 'ubuntu', 'alpine' ]
        architecture: [ 'amd64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl --silent "https://dotnetcli.azureedge.net/dotnet/Runtime/${{ matrix.version }}.0/latest.version")
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}.0,enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
            type=raw,value=${{ matrix.version }}.0-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}.0
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/${{ matrix.distro }}/dotnet/dockerfile
          context: context/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            DOTNET_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  aspnetcore:
    name: ASP.NET Core Runtime
    runs-on: ubuntu-latest
    needs:
      - ubuntu
      - alpine
    env:
      REGISTRY_IMAGE_NAME: aspnetcore
      HUMAN_IMAGE_NAME: ASP.NET Core Runtime
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: [ '6', '7', '8', '9' ]
        distro: [ 'ubuntu', 'alpine' ]
        architecture: [ 'amd64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl --silent "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/${{ matrix.version }}.0/latest.version")
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}.0,enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
            type=raw,value=${{ matrix.version }}.0-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}.0
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/${{ matrix.distro }}/aspnetcore/dockerfile
          context: context/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            ASPNETCORE_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  nodejs:
    name: Node.js
    runs-on: ubuntu-latest
    needs:
      - ubuntu
      - alpine
    env:
      REGISTRY_IMAGE_NAME: nodejs
      HUMAN_IMAGE_NAME: Node.js
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: [ '18', '20', '21', '22', '23', '24' ]
        distro: [ 'ubuntu', 'alpine' ]
        architecture: [ 'amd64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r --arg VERSION ${{ matrix.version }} '[ .[] | select( .version | startswith( "v" + $VERSION ) ) ][ 0 ].version' | cut -b 2-)
          LATEST_CHECKSUM=$(case "${{ matrix.distro }}" in alpine) echo $(curl -s https://unofficial-builds.nodejs.org/download/release/v${LATEST_VERSION}/SHASUMS256.txt | grep node-v${LATEST_VERSION}-linux-x64-musl.tar.gz | cut -f 1 -d ' ') ;; *)
          echo $(curl -s https://nodejs.org/dist/v${LATEST_VERSION}/SHASUMS256.txt.asc | grep node-v${LATEST_VERSION}-linux-x64.tar.gz | cut -f 1 -d ' ') ;; esac)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          echo "LATEST_CHECKSUM=${LATEST_CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Fetch compatible NPM version
        id: npm
        run: |
          COMPATIBLE_NPM_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r --arg VERSION ${{ matrix.version }} '[ .[] | select( .version | startswith( "v" + $VERSION ) ) ][ 0 ].npm')
          echo "COMPATIBLE_NPM_VERSION=${COMPATIBLE_NPM_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'ubuntu' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/${{ matrix.distro }}/nodejs/dockerfile
          context: context/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            NODEJS_VERSION=${{ steps.version.outputs.LATEST_VERSION }}
            NODEJS_CHECKSUM=${{ steps.version.outputs.LATEST_CHECKSUM }}
            NPM_VERSION=${{ steps.npm.outputs.COMPATIBLE_NPM_VERSION }}

  python:
    name: Python
    runs-on: ubuntu-latest
    needs:
      - ubuntu
    env:
      REGISTRY_IMAGE_NAME: python
      HUMAN_IMAGE_NAME: Python
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        version: [ '3' ]
        distro: [ 'ubuntu' ]
        architecture: [ 'amd64' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/${{ matrix.architecture }}

      - name: Fetch latest version
        id: version
        run: echo "LATEST_VERSION=$(curl -s https://endoflife.date/api/python.json | jq -r --arg MAJOR ${{ matrix.version }} '[ .[] | select ( .cycle | startswith( $MAJOR + "." ) ) ][ 0 ].latest')" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.DOCKER_LABEL_PUBLISHER_URL }}

      # This is necessary to avoid hitting the GHCR rate-limits as there are so many images built during this workflow due to the matrixes.
      - name: Sleep due to rate-limiting
        run: |
          SLEEP_SECONDS=$(($RANDOM % 300))
          echo "Sleeping for $SLEEP_SECONDS seconds to avoid hitting the GitHub Container Registry's push rate-limits..."
          sleep $SLEEP_SECONDS

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
          file: images/${{ matrix.distro }}/${{ github.job }}/dockerfile
          context: context/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/${{ matrix.architecture }}
          provenance: false
          no-cache: true
          pull: true
          build-args: |
            PYTHON_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  fatManifest:
    name: Fat Manifest
    runs-on: ubuntu-latest
    needs:
      - ubuntu
      - alpine
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        image:
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:24.04
          - ubuntu:25.04
          - alpine:3.16
          - alpine:3.17
          - alpine:3.18
          - alpine:3.19
          - alpine:3.20
          - alpine:3.21
          - alpine:3.22
    permissions:
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_DOMAIN }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker manifest
        run: |
          docker manifest create ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }} \
            --amend ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }}-amd64 \
            --amend ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }}-arm64

          docker manifest annotate --os linux --arch amd64 \
            ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }} \
            ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }}-amd64

          docker manifest annotate --os linux --arch arm64 \
            ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }} \
            ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }}-arm64

      - name: Push Docker manifest
        if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
        run: docker manifest push ${{ env.DOCKER_REGISTRY_DOMAIN }}/${{ github.repository_owner }}/${{ matrix.image }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && !startsWith( github.ref_name, 'dependabot/' ) }}
    needs:
      - ubuntu
      - alpine
      - java
      - dotnet
      - aspnetcore
      - nodejs
      - python
      - fatManifest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        image:
          - ubuntu
          - alpine
          - java
          - dotnet
          - aspnetcore
          - nodejs
          - python
    permissions:
      packages: write
    steps:
      - name: Delete stale Docker images
        uses: actions/delete-package-versions@v5
        with:
            package-type: container
            package-name: ${{ matrix.image }}
            delete-only-untagged-versions: true
            min-versions-to-keep: 1
            ignore-versions: latest
