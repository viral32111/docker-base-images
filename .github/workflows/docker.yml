# This workflow builds all of the Docker images.

name: Docker

# Run when relevant files change, and every week
on:
  push:
    paths:
      - 'context/**'
      - 'images/**'
      - '.dockerignore'
      - '.github/workflows/docker.yml'
    branches:
      - '**'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - '**'
  schedule:
    - cron: '0 1 * * 0'
  workflow_dispatch:

# Cancel any previously running workflows
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# Variables available in all jobs
env:
  REGISTRY_NAME: ghcr.io
  PUBLISHER_WEBSITE: https://viral32111.com

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-22.04
    env:
      REGISTRY_IMAGE_NAME: ubuntu
      HUMAN_IMAGE_NAME: Ubuntu
    strategy:
      matrix:
        version: [ '20.04', '22.04', '22.10' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch & download latest version
        id: version
        run: |
          export VERSION_NAME=$(curl -s https://api.launchpad.net/1.0/ubuntu/series | jq -r '.entries[] | select( .version == "${{ matrix.version }}" ) | .name')
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_OUTPUT

          export DATE_TODAY=$(date +'%Y-%m-%d')
          export LATEST_VERSION=$(curl -s https://api.launchpad.net/1.0/ubuntu/${VERSION_NAME}/all_milestones | jq --arg today ${DATE_TODAY} -r '[ .entries[] | select( ( .name | endswith( "-updates" ) | not ) and .date_targeted <= $today ) ][ 0 ].name' | sed --regexp-extended 's/^ubuntu-//g')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

          wget --output-document ./context/ubuntu.tar.gz https://cdimage.ubuntu.com/ubuntu-base/releases/${{ matrix.version }}/release/ubuntu-base-${LATEST_VERSION}-base-amd64.tar.gz

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/ubuntu/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            UBUNTU_VERSION_NAME=${{ steps.version.outputs.VERSION_NAME }}

  alpine:
    name: Alpine Linux
    runs-on: ubuntu-22.04
    env:
      REGISTRY_IMAGE_NAME: alpine
      HUMAN_IMAGE_NAME: Alpine Linux
    strategy:
      matrix:
        version: [ '3.16', '3.17' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch & download latest version
        id: version
        run: |
          export LATEST_VERSION=$(curl --silent https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.version }}/releases/x86_64/latest-releases.yaml | yq '.[] | select( .flavor == "alpine-minirootfs" ) | .version')
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

          wget --output-document ./context/alpine.tar.gz https://dl-cdn.alpinelinux.org/alpine/v${{ matrix.version }}/releases/x86_64/alpine-minirootfs-${LATEST_VERSION}-x86_64.tar.gz

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: type=raw,value=${{ matrix.version }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.result }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.result }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/alpine/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            ALPINE_BRANCH=${{ matrix.version }}

  java:
    name: Java
    runs-on: ubuntu-22.04
    needs:
      - ubuntu
      - alpine
    env:
      REGISTRY_IMAGE_NAME: java
      HUMAN_IMAGE_NAME: Java
    strategy:
      matrix:
        version: [ '8', '11', '16', '17', '18', '19' ]
        distro: [ 'ubuntu', 'alpine' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch latest version
        id: version
        uses: actions/github-script@v6
        env:
          MATRIX_VERSION: ${{ matrix.version }}
          MATRIX_DISTRO: ${{ matrix.distro }}
        with:
          result-encoding: string
          script: |
            const repositoryOwner = 'adoptium';
            const repositoryName = 'temurin' + process.env.MATRIX_VERSION + '-binaries';
            const releaseType = process.env.MATRIX_VERSION === '16' ? 'jdk' : 'jre';

            for await ( const response of github.paginate.iterator( {
                owner: repositoryOwner,
                repo: repositoryName
            } ) ) {
              const releases = response.data;

              for ( const release of releases ) {
                if ( release.draft === true || release.prerelease === true ) continue;

                for ( const releaseAsset of release.assets ) {
                  if ( process.env.MATRIX_DISTRO == 'alpine' && releaseAsset.name.includes( releaseType + '_x64_alpine-linux' ) ) {
                    return release.name.replace( /^jdk-?/, '' );
                  } else if ( process.env.MATRIX_DISTRO == 'ubuntu' && releaseAsset.name.includes( releaseType + '_x64_linux' ) ) {
                    return release.name.replace( /^jdk-?/, '' );
                  }
                }
              }
            }

            core.setFailed( 'Failed to fetch the latest version' );

      - name: Clear context directory
        run: rm --verbose --recursive ./context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.result }} (${{ matrix.distro }}-based)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.result }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/${{ matrix.distro }}/java/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            JAVA_VERSION=${{ steps.version.outputs.result }}

  dotnet:
    name: .NET Runtime
    runs-on: ubuntu-22.04
    needs:
      - alpine
    env:
      REGISTRY_IMAGE_NAME: dotnet
      HUMAN_IMAGE_NAME: .NET Runtime
    strategy:
      matrix:
        version: [ '6.0', '7.0' ]
        distro: [ 'alpine' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl --silent "https://dotnetcli.azureedge.net/dotnet/Runtime/${{ matrix.version }}/latest.version")
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive ./context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/${{ matrix.distro }}/.net/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            DOTNET_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  aspnetcore:
    name: ASP.NET Core Runtime
    runs-on: ubuntu-22.04
    needs:
      - alpine
    env:
      REGISTRY_IMAGE_NAME: aspnetcore
      HUMAN_IMAGE_NAME: ASP.NET Core Runtime
    strategy:
      matrix:
        version: [ '6.0', '7.0' ]
        distro: [ 'alpine' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl --silent "https://dotnetcli.azureedge.net/dotnet/aspnetcore/Runtime/${{ matrix.version }}/latest.version")
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive ./context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'alpine' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/${{ matrix.distro }}/asp.net/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            ASPNETCORE_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  nodejs:
    name: Node.js
    runs-on: ubuntu-22.04
    needs:
      - ubuntu
    env:
      REGISTRY_IMAGE_NAME: nodejs
      HUMAN_IMAGE_NAME: Node.js
    strategy:
      matrix:
        version: [ '18', '19' ]
        distro: [ 'ubuntu' ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
          # https://github.com/docker/build-push-action/issues/761
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Fetch latest version
        id: version
        run: |
          LATEST_VERSION=$(curl -s https://nodejs.org/dist/index.json | jq -r --arg VERSION ${{ matrix.version }} '[ .[] | select( .version | startswith( "v" + $VERSION ) ) ][ 0 ].version' | cut -b 2-)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Clear context directory
        run: rm --verbose --recursive ./context/*

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          flavor: latest=false
          images: ${{ env.REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.REGISTRY_IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.version }},enable=${{ matrix.distro == 'ubuntu' }}
            type=raw,value=${{ matrix.version }}-${{ matrix.distro }}
          labels: |
            org.opencontainers.image.title=${{ env.HUMAN_IMAGE_NAME }} ${{ matrix.version }}
            org.opencontainers.image.description=${{ env.HUMAN_IMAGE_NAME }} ${{ steps.version.outputs.LATEST_VERSION }} (${{ matrix.distro }}-based)
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.version.outputs.LATEST_VERSION }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
          file: ./images/${{ matrix.distro }}/node.js/dockerfile
          context: ./context
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true
          build-args: |
            NODEJS_VERSION=${{ steps.version.outputs.LATEST_VERSION }}

  cleanup:
    name: Cleanup Registry
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    needs:
      - ubuntu
      - alpine
      - java
      - dotnet
      - aspnetcore
      - nodejs
    env:
      REGISTRY_NAME: ghcr.io
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete untagged Docker images
        uses: snok/container-retention-policy@v1
        with:
          image-names: ubuntu,alpine,java,dotnet,aspnetcore,nodejs
          cut-off: 0 seconds ago UTC
          keep-at-least: 1
          untagged-only: true
          account-type: personal
          token: ${{ secrets.PAT_PACKAGES }}
